// <auto-generated />
using System;
using Hundtricket.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(HundtricketContext))]
    [Migration("20230419122350_UpdatedTables")]
    partial class UpdatedTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Dog", b =>
                {
                    b.Property<Guid>("DogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("Allergenic")
                        .HasColumnType("bit");

                    b.Property<int>("DogBreedId")
                        .HasColumnType("int");

                    b.Property<int>("DogEnergyLevelId")
                        .HasColumnType("int");

                    b.Property<Guid>("DogFiltersRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPicturesRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DogSizeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DogId");

                    b.HasIndex("DogBreedId");

                    b.HasIndex("DogEnergyLevelId");

                    b.HasIndex("DogFiltersRelationshipsId");

                    b.HasIndex("DogPicturesRelationshipsId");

                    b.HasIndex("DogSizeId");

                    b.ToTable("Dogs");

                    b.HasData(
                        new
                        {
                            DogId = new Guid("58d2a1d1-41c4-463e-8b03-4331d25afb19"),
                            Age = 1,
                            Allergenic = false,
                            DogBreedId = 1,
                            DogEnergyLevelId = 2,
                            DogFiltersRelationshipsId = new Guid("6e3814b0-4f69-4f6b-a1de-dc8cdca683a9"),
                            DogPicturesRelationshipsId = new Guid("f83e87d7-e89d-42ec-96ac-619d6f601f1d"),
                            DogSizeId = 3,
                            Name = "Eddie"
                        },
                        new
                        {
                            DogId = new Guid("6c426a0f-7479-4d0a-b859-3aa902eef68c"),
                            Age = 11,
                            Allergenic = false,
                            DogBreedId = 2,
                            DogEnergyLevelId = 1,
                            DogFiltersRelationshipsId = new Guid("facd3d74-653b-411b-8da9-7d8e9641784d"),
                            DogPicturesRelationshipsId = new Guid("f8ecea09-bc87-48b9-8a1e-efc892ae88a6"),
                            DogSizeId = 4,
                            Name = "Thor"
                        });
                });

            modelBuilder.Entity("Entities.DogBreed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DogBreeds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Breed = "Mixed"
                        },
                        new
                        {
                            Id = 2,
                            Breed = "Samoyed"
                        });
                });

            modelBuilder.Entity("Entities.DogEnergyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnergyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DogEnergyLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnergyLevel = "Low"
                        },
                        new
                        {
                            Id = 2,
                            EnergyLevel = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            EnergyLevel = "High"
                        });
                });

            modelBuilder.Entity("Entities.DogFilters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Adaptable")
                        .HasColumnType("bit");

                    b.Property<decimal>("AverageWalk")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Confident")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DogFiltersRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EnergyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Independent")
                        .HasColumnType("bit");

                    b.Property<bool>("LaidBack")
                        .HasColumnType("bit");

                    b.Property<bool>("Timid")
                        .HasColumnType("bit");

                    b.Property<bool>("WorksWithBoys")
                        .HasColumnType("bit");

                    b.Property<bool>("WorksWithGirls")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DogFiltersRelationshipsId");

                    b.ToTable("DogFilters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("573b0558-a071-4a70-a6ca-d2bfc67d58bf"),
                            Adaptable = false,
                            AverageWalk = 0m,
                            Confident = false,
                            EnergyLevel = "Medium",
                            Independent = false,
                            LaidBack = false,
                            Timid = false,
                            WorksWithBoys = false,
                            WorksWithGirls = false
                        },
                        new
                        {
                            Id = new Guid("636fc45b-7bb8-4c4d-9e7f-54cdb934527f"),
                            Adaptable = false,
                            AverageWalk = 0m,
                            Confident = false,
                            EnergyLevel = "Medium2",
                            Independent = false,
                            LaidBack = false,
                            Timid = false,
                            WorksWithBoys = false,
                            WorksWithGirls = false
                        },
                        new
                        {
                            Id = new Guid("fc6055f3-f1af-44a9-9aef-8483cba183f4"),
                            Adaptable = false,
                            AverageWalk = 0m,
                            Confident = false,
                            EnergyLevel = "Low",
                            Independent = false,
                            LaidBack = false,
                            Timid = false,
                            WorksWithBoys = false,
                            WorksWithGirls = false
                        },
                        new
                        {
                            Id = new Guid("154544e5-0ceb-4e0b-8a05-19a550eab0a6"),
                            Adaptable = false,
                            AverageWalk = 0m,
                            Confident = false,
                            EnergyLevel = "Low2",
                            Independent = false,
                            LaidBack = false,
                            Timid = false,
                            WorksWithBoys = false,
                            WorksWithGirls = false
                        });
                });

            modelBuilder.Entity("Entities.DogFiltersRelationships", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPersonality")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPreferences")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DogFiltersRelationships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e3814b0-4f69-4f6b-a1de-dc8cdca683a9"),
                            DogPersonality = new Guid("573b0558-a071-4a70-a6ca-d2bfc67d58bf"),
                            DogPreferences = new Guid("636fc45b-7bb8-4c4d-9e7f-54cdb934527f")
                        },
                        new
                        {
                            Id = new Guid("facd3d74-653b-411b-8da9-7d8e9641784d"),
                            DogPersonality = new Guid("fc6055f3-f1af-44a9-9aef-8483cba183f4"),
                            DogPreferences = new Guid("154544e5-0ceb-4e0b-8a05-19a550eab0a6")
                        });
                });

            modelBuilder.Entity("Entities.DogPictures", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPicturesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DogPicturesRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DogPicturesRelationshipsId");

                    b.ToTable("DogPictures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1ae404a-29be-492f-9fcc-e255666b6c7e"),
                            DogPicturesId = new Guid("fc36a634-28a5-450e-a1f3-dd61bf9be713"),
                            Photo = "Eddies only profile Picture"
                        },
                        new
                        {
                            Id = new Guid("63d3830f-f3c8-48a9-9720-7ad7436928b0"),
                            DogPicturesId = new Guid("eaa470cb-086e-478a-ac24-9b1867348337"),
                            Photo = "Thors first profile Picture"
                        },
                        new
                        {
                            Id = new Guid("4d4d96a7-1c9e-4083-8f0d-d0af3ea7667e"),
                            DogPicturesId = new Guid("eaa470cb-086e-478a-ac24-9b1867348337"),
                            Photo = "Thors second profile Picture"
                        });
                });

            modelBuilder.Entity("Entities.DogPicturesRelationships", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPicturesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DogPicturesRelationships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f83e87d7-e89d-42ec-96ac-619d6f601f1d"),
                            DogPicturesId = new Guid("fc36a634-28a5-450e-a1f3-dd61bf9be713")
                        },
                        new
                        {
                            Id = new Guid("f8ecea09-bc87-48b9-8a1e-efc892ae88a6"),
                            DogPicturesId = new Guid("eaa470cb-086e-478a-ac24-9b1867348337")
                        });
                });

            modelBuilder.Entity("Entities.DogSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DogSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Size = "Mini"
                        },
                        new
                        {
                            Id = 2,
                            Size = "Small"
                        },
                        new
                        {
                            Id = 3,
                            Size = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Size = "Large"
                        },
                        new
                        {
                            Id = 5,
                            Size = "Giant"
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSignedOn")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserDogRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserDogRelationshipsId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("904fc15a-eeeb-45b8-9ad9-53d6e8ccd2f2"),
                            Age = 30,
                            Email = "Nixgabriel92@gmail.com",
                            FirstName = "Gabriel",
                            IsSignedOn = false,
                            LastName = "Nix",
                            Password = "Blank",
                            UserDogRelationshipsId = new Guid("d697b631-4a09-4b47-82d4-8b2550bd9e3c"),
                            UserProfileId = new Guid("2742fb40-67ac-4e65-a959-df5895286628")
                        });
                });

            modelBuilder.Entity("Entities.UserDogRelationships", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersDogId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserDogRelationships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d697b631-4a09-4b47-82d4-8b2550bd9e3c"),
                            UsersDogId = new Guid("93e1d209-3dac-4c60-8839-771547ce4b7d")
                        });
                });

            modelBuilder.Entity("Entities.UserDogs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDogRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersDogId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserDogRelationshipsId");

                    b.ToTable("UserDogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("099d4186-1bd4-4609-84f0-03884995e210"),
                            DogId = new Guid("58d2a1d1-41c4-463e-8b03-4331d25afb19"),
                            UsersDogId = new Guid("93e1d209-3dac-4c60-8839-771547ce4b7d")
                        },
                        new
                        {
                            Id = new Guid("7848a28f-de24-45dd-9c06-f025e6c64c73"),
                            DogId = new Guid("6c426a0f-7479-4d0a-b859-3aa902eef68c"),
                            UsersDogId = new Guid("93e1d209-3dac-4c60-8839-771547ce4b7d")
                        });
                });

            modelBuilder.Entity("Entities.UserHobbies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Gaming")
                        .HasColumnType("bit");

                    b.Property<bool>("Gymming")
                        .HasColumnType("bit");

                    b.Property<bool>("Hiking")
                        .HasColumnType("bit");

                    b.Property<bool>("Movies")
                        .HasColumnType("bit");

                    b.Property<bool>("Music")
                        .HasColumnType("bit");

                    b.Property<bool>("Nature")
                        .HasColumnType("bit");

                    b.Property<bool>("Swimming")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UserHobbies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58b59ef1-225a-4bfd-b71c-1a91ba536955"),
                            Gaming = true,
                            Gymming = false,
                            Hiking = false,
                            Movies = true,
                            Music = false,
                            Nature = false,
                            Swimming = true
                        });
                });

            modelBuilder.Entity("Entities.UserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationRange")
                        .HasColumnType("int");

                    b.Property<int?>("OldestAge")
                        .HasColumnType("int");

                    b.Property<int?>("YoungestAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef7c000d-1d12-4feb-932d-80c11067a08a"),
                            Gender = "All",
                            LocationRange = 60,
                            OldestAge = 40,
                            YoungestAge = 25
                        });
                });

            modelBuilder.Entity("Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexuality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserHobbiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserPreferencesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserHobbiesId");

                    b.HasIndex("UserPreferencesId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2742fb40-67ac-4e65-a959-df5895286628"),
                            About = "Test Content",
                            Gender = "Male",
                            Job = "Student",
                            Location = "Bullaren",
                            Sexuality = "Bisexual",
                            UserHobbiesId = new Guid("58b59ef1-225a-4bfd-b71c-1a91ba536955"),
                            UserPreferencesId = new Guid("ef7c000d-1d12-4feb-932d-80c11067a08a")
                        });
                });

            modelBuilder.Entity("Entities.Dog", b =>
                {
                    b.HasOne("Entities.DogBreed", "DogBreed")
                        .WithMany()
                        .HasForeignKey("DogBreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DogEnergyLevel", "DogEnergyLevel")
                        .WithMany()
                        .HasForeignKey("DogEnergyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DogFiltersRelationships", "DogFiltersRelationships")
                        .WithMany()
                        .HasForeignKey("DogFiltersRelationshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DogPicturesRelationships", "DogPicturesRelationships")
                        .WithMany()
                        .HasForeignKey("DogPicturesRelationshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DogSize", "DogSize")
                        .WithMany()
                        .HasForeignKey("DogSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogBreed");

                    b.Navigation("DogEnergyLevel");

                    b.Navigation("DogFiltersRelationships");

                    b.Navigation("DogPicturesRelationships");

                    b.Navigation("DogSize");
                });

            modelBuilder.Entity("Entities.DogFilters", b =>
                {
                    b.HasOne("Entities.DogFiltersRelationships", null)
                        .WithMany("DogFilters")
                        .HasForeignKey("DogFiltersRelationshipsId");
                });

            modelBuilder.Entity("Entities.DogPictures", b =>
                {
                    b.HasOne("Entities.DogPicturesRelationships", null)
                        .WithMany("DogPictures")
                        .HasForeignKey("DogPicturesRelationshipsId");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.UserDogRelationships", "UserDogRelationships")
                        .WithMany()
                        .HasForeignKey("UserDogRelationshipsId");

                    b.HasOne("Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserDogRelationships");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Entities.UserDogs", b =>
                {
                    b.HasOne("Entities.UserDogRelationships", null)
                        .WithMany("UserDogs")
                        .HasForeignKey("UserDogRelationshipsId");
                });

            modelBuilder.Entity("Entities.UserProfile", b =>
                {
                    b.HasOne("Entities.UserHobbies", "UserHobbies")
                        .WithMany()
                        .HasForeignKey("UserHobbiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserPreferences", "UserPreferences")
                        .WithMany()
                        .HasForeignKey("UserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserHobbies");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("Entities.DogFiltersRelationships", b =>
                {
                    b.Navigation("DogFilters");
                });

            modelBuilder.Entity("Entities.DogPicturesRelationships", b =>
                {
                    b.Navigation("DogPictures");
                });

            modelBuilder.Entity("Entities.UserDogRelationships", b =>
                {
                    b.Navigation("UserDogs");
                });
#pragma warning restore 612, 618
        }
    }
}
