// <auto-generated />
using System;
using Hundtricket.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(HundtricketContext))]
    [Migration("20230412134447_UpdatedUser2")]
    partial class UpdatedUser2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Dog", b =>
                {
                    b.Property<Guid>("DogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("Allergenic")
                        .HasColumnType("bit");

                    b.Property<int>("DogBreedId")
                        .HasColumnType("int");

                    b.Property<int>("DogEnergyLevelId")
                        .HasColumnType("int");

                    b.Property<Guid>("DogFiltersRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPicturesRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DogSizeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DogId");

                    b.HasIndex("DogBreedId");

                    b.HasIndex("DogEnergyLevelId");

                    b.HasIndex("DogFiltersRelationshipsId");

                    b.HasIndex("DogPicturesRelationshipsId");

                    b.HasIndex("DogSizeId");

                    b.ToTable("Dogs");

                    b.HasData(
                        new
                        {
                            DogId = new Guid("24410293-4c3f-4f28-8095-b60956d84329"),
                            Age = 1,
                            Allergenic = false,
                            DogBreedId = 1,
                            DogEnergyLevelId = 2,
                            DogFiltersRelationshipsId = new Guid("1ccd0a96-ea98-4bf7-b8dd-2e50fa5a85c3"),
                            DogPicturesRelationshipsId = new Guid("4191e2f7-efe9-4107-9fda-9fbcad710bc7"),
                            DogSizeId = 3,
                            Name = "Eddie"
                        },
                        new
                        {
                            DogId = new Guid("7208623d-ae41-466d-ab75-e5d674e8f359"),
                            Age = 11,
                            Allergenic = false,
                            DogBreedId = 2,
                            DogEnergyLevelId = 1,
                            DogFiltersRelationshipsId = new Guid("d1d13618-fd1a-47ca-9710-ad27b01bf803"),
                            DogPicturesRelationshipsId = new Guid("0fba907b-ebf7-4f76-88e5-1a17324f14c9"),
                            DogSizeId = 4,
                            Name = "Thor"
                        });
                });

            modelBuilder.Entity("Entities.DogBreed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DogBreeds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Breed = "Mixed"
                        },
                        new
                        {
                            Id = 2,
                            Breed = "Samoyed"
                        });
                });

            modelBuilder.Entity("Entities.DogEnergyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnergyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DogEnergyLevel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnergyLevel = "Low"
                        },
                        new
                        {
                            Id = 2,
                            EnergyLevel = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            EnergyLevel = "High"
                        });
                });

            modelBuilder.Entity("Entities.DogFilters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Adaptable")
                        .HasColumnType("bit");

                    b.Property<decimal>("AverageWalk")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Confident")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DogFiltersRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EnergyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Independent")
                        .HasColumnType("bit");

                    b.Property<bool>("LaidBack")
                        .HasColumnType("bit");

                    b.Property<bool>("Timid")
                        .HasColumnType("bit");

                    b.Property<bool>("WorksWithBoys")
                        .HasColumnType("bit");

                    b.Property<bool>("WorksWithGirls")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DogFiltersRelationshipsId");

                    b.ToTable("DogFilters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e9d1634-b1ac-4fc4-a8b3-29006c405614"),
                            Adaptable = false,
                            AverageWalk = 0m,
                            Confident = false,
                            EnergyLevel = "Medium",
                            Independent = false,
                            LaidBack = false,
                            Timid = false,
                            WorksWithBoys = false,
                            WorksWithGirls = false
                        },
                        new
                        {
                            Id = new Guid("daeb54bb-961c-44e8-afe6-3f8e84211cd0"),
                            Adaptable = false,
                            AverageWalk = 0m,
                            Confident = false,
                            EnergyLevel = "Medium2",
                            Independent = false,
                            LaidBack = false,
                            Timid = false,
                            WorksWithBoys = false,
                            WorksWithGirls = false
                        },
                        new
                        {
                            Id = new Guid("35548ddb-6808-469a-b443-6dd6430cc8e6"),
                            Adaptable = false,
                            AverageWalk = 0m,
                            Confident = false,
                            EnergyLevel = "Low",
                            Independent = false,
                            LaidBack = false,
                            Timid = false,
                            WorksWithBoys = false,
                            WorksWithGirls = false
                        },
                        new
                        {
                            Id = new Guid("fcefd60f-f69b-405e-9517-f0faf8504750"),
                            Adaptable = false,
                            AverageWalk = 0m,
                            Confident = false,
                            EnergyLevel = "Low2",
                            Independent = false,
                            LaidBack = false,
                            Timid = false,
                            WorksWithBoys = false,
                            WorksWithGirls = false
                        });
                });

            modelBuilder.Entity("Entities.DogFiltersRelationships", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPersonality")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPreferences")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DogFiltersRelationships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ccd0a96-ea98-4bf7-b8dd-2e50fa5a85c3"),
                            DogPersonality = new Guid("2e9d1634-b1ac-4fc4-a8b3-29006c405614"),
                            DogPreferences = new Guid("daeb54bb-961c-44e8-afe6-3f8e84211cd0")
                        },
                        new
                        {
                            Id = new Guid("d1d13618-fd1a-47ca-9710-ad27b01bf803"),
                            DogPersonality = new Guid("35548ddb-6808-469a-b443-6dd6430cc8e6"),
                            DogPreferences = new Guid("fcefd60f-f69b-405e-9517-f0faf8504750")
                        });
                });

            modelBuilder.Entity("Entities.DogPictures", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPicturesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DogPicturesRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DogPicturesRelationshipsId");

                    b.ToTable("DogPictures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c2d2857-2f5e-4a78-9859-f160582fd9bc"),
                            DogPicturesId = new Guid("a19a55c3-8a15-4f76-8bdd-b1bcf3655a33"),
                            Photo = "Eddies only profile Picture"
                        },
                        new
                        {
                            Id = new Guid("2f3c9151-b414-458c-ac46-3664ecd04275"),
                            DogPicturesId = new Guid("52c9f07e-a2b9-4399-a7a5-d9fe48d78a4d"),
                            Photo = "Thors first profile Picture"
                        },
                        new
                        {
                            Id = new Guid("3a0aeb0c-49b9-41e8-a8b7-3956cf90ab82"),
                            DogPicturesId = new Guid("52c9f07e-a2b9-4399-a7a5-d9fe48d78a4d"),
                            Photo = "Thors second profile Picture"
                        });
                });

            modelBuilder.Entity("Entities.DogPicturesRelationships", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogPicturesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DogPicturesRelationships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4191e2f7-efe9-4107-9fda-9fbcad710bc7"),
                            DogPicturesId = new Guid("a19a55c3-8a15-4f76-8bdd-b1bcf3655a33")
                        },
                        new
                        {
                            Id = new Guid("0fba907b-ebf7-4f76-88e5-1a17324f14c9"),
                            DogPicturesId = new Guid("52c9f07e-a2b9-4399-a7a5-d9fe48d78a4d")
                        });
                });

            modelBuilder.Entity("Entities.DogSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DogSize");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Size = "Mini"
                        },
                        new
                        {
                            Id = 2,
                            Size = "Small"
                        },
                        new
                        {
                            Id = 3,
                            Size = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Size = "Large"
                        },
                        new
                        {
                            Id = 5,
                            Size = "Giant"
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSignedOn")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserDogRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserDogRelationshipsId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d3aa892-c2ca-4b6c-976e-aeee2a70044e"),
                            Age = 30,
                            Email = "Nixgabriel92@gmail.com",
                            FirstName = "Gabriel",
                            IsSignedOn = false,
                            LastName = "Nix",
                            Password = "Blank",
                            UserDogRelationshipsId = new Guid("f82ea372-ae29-46d7-984c-65baf533aee8"),
                            UserProfileId = new Guid("586a7bbd-ec3f-4cc1-8b91-267978139262")
                        });
                });

            modelBuilder.Entity("Entities.UserDogRelationships", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersDogId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserDogRelationships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f82ea372-ae29-46d7-984c-65baf533aee8"),
                            UsersDogId = new Guid("39aab694-2b89-45f7-b4dd-13879e7c6f49")
                        });
                });

            modelBuilder.Entity("Entities.UserDogs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDogRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersDogId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserDogRelationshipsId");

                    b.ToTable("UserDogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ad8543b-6ad7-4e07-8b4e-b626f6412fa0"),
                            DogId = new Guid("24410293-4c3f-4f28-8095-b60956d84329"),
                            UsersDogId = new Guid("39aab694-2b89-45f7-b4dd-13879e7c6f49")
                        },
                        new
                        {
                            Id = new Guid("f9915ca6-f4af-4e19-9101-2eacc0326584"),
                            DogId = new Guid("7208623d-ae41-466d-ab75-e5d674e8f359"),
                            UsersDogId = new Guid("39aab694-2b89-45f7-b4dd-13879e7c6f49")
                        });
                });

            modelBuilder.Entity("Entities.UserHobbies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Gaming")
                        .HasColumnType("bit");

                    b.Property<bool>("Gymming")
                        .HasColumnType("bit");

                    b.Property<bool>("Hiking")
                        .HasColumnType("bit");

                    b.Property<bool>("Movies")
                        .HasColumnType("bit");

                    b.Property<bool>("Music")
                        .HasColumnType("bit");

                    b.Property<bool>("Nature")
                        .HasColumnType("bit");

                    b.Property<bool>("Swimming")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserHobbiesRelationShipsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserHobbiesRelationShipsId");

                    b.ToTable("UserHobbies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11778833-0b82-4203-964b-32f52d90c288"),
                            Gaming = true,
                            Gymming = false,
                            Hiking = false,
                            Movies = true,
                            Music = false,
                            Nature = false,
                            Swimming = true
                        },
                        new
                        {
                            Id = new Guid("488b5d17-7cce-45c4-9d35-f10da4c0513e"),
                            Gaming = false,
                            Gymming = true,
                            Hiking = false,
                            Movies = false,
                            Music = false,
                            Nature = false,
                            Swimming = false
                        });
                });

            modelBuilder.Entity("Entities.UserHobbiesRelationShips", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DislikesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LikesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserHobbiesRelationShips");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5e7e762-64ea-4225-a1cb-9df4899997fe"),
                            DislikesId = new Guid("488b5d17-7cce-45c4-9d35-f10da4c0513e"),
                            LikesId = new Guid("11778833-0b82-4203-964b-32f52d90c288")
                        });
                });

            modelBuilder.Entity("Entities.UserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationRange")
                        .HasColumnType("int");

                    b.Property<int>("OldestAge")
                        .HasColumnType("int");

                    b.Property<int>("YoungestAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9687c10c-bac6-4fe9-bbc5-5dbceb5e2753"),
                            Gender = "All",
                            LocationRange = 60,
                            OldestAge = 40,
                            YoungestAge = 25
                        });
                });

            modelBuilder.Entity("Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserHobbiesRelationshipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserPreferencesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserHobbiesRelationshipsId");

                    b.HasIndex("UserPreferencesId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("586a7bbd-ec3f-4cc1-8b91-267978139262"),
                            About = "Test Content",
                            Gender = "Male",
                            Job = "Student",
                            Location = "Bullaren",
                            Sexuality = "Bisexual",
                            UserHobbiesRelationshipsId = new Guid("b5e7e762-64ea-4225-a1cb-9df4899997fe"),
                            UserPreferencesId = new Guid("9687c10c-bac6-4fe9-bbc5-5dbceb5e2753")
                        });
                });

            modelBuilder.Entity("Entities.Dog", b =>
                {
                    b.HasOne("Entities.DogBreed", "DogBreed")
                        .WithMany()
                        .HasForeignKey("DogBreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DogEnergyLevel", "DogEnergyLevel")
                        .WithMany()
                        .HasForeignKey("DogEnergyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DogFiltersRelationships", "DogFiltersRelationships")
                        .WithMany()
                        .HasForeignKey("DogFiltersRelationshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DogPicturesRelationships", "DogPicturesRelationships")
                        .WithMany()
                        .HasForeignKey("DogPicturesRelationshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DogSize", "DogSize")
                        .WithMany()
                        .HasForeignKey("DogSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogBreed");

                    b.Navigation("DogEnergyLevel");

                    b.Navigation("DogFiltersRelationships");

                    b.Navigation("DogPicturesRelationships");

                    b.Navigation("DogSize");
                });

            modelBuilder.Entity("Entities.DogFilters", b =>
                {
                    b.HasOne("Entities.DogFiltersRelationships", null)
                        .WithMany("DogFilters")
                        .HasForeignKey("DogFiltersRelationshipsId");
                });

            modelBuilder.Entity("Entities.DogPictures", b =>
                {
                    b.HasOne("Entities.DogPicturesRelationships", null)
                        .WithMany("DogPictures")
                        .HasForeignKey("DogPicturesRelationshipsId");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.UserDogRelationships", "UserDogRelationships")
                        .WithMany()
                        .HasForeignKey("UserDogRelationshipsId");

                    b.HasOne("Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserDogRelationships");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Entities.UserDogs", b =>
                {
                    b.HasOne("Entities.UserDogRelationships", null)
                        .WithMany("UserDogs")
                        .HasForeignKey("UserDogRelationshipsId");
                });

            modelBuilder.Entity("Entities.UserHobbies", b =>
                {
                    b.HasOne("Entities.UserHobbiesRelationShips", null)
                        .WithMany("UserHobbies")
                        .HasForeignKey("UserHobbiesRelationShipsId");
                });

            modelBuilder.Entity("Entities.UserProfile", b =>
                {
                    b.HasOne("Entities.UserHobbiesRelationShips", "UserHobbiesRelationShips")
                        .WithMany()
                        .HasForeignKey("UserHobbiesRelationshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserPreferences", "UserPreferences")
                        .WithMany()
                        .HasForeignKey("UserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserHobbiesRelationShips");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("Entities.DogFiltersRelationships", b =>
                {
                    b.Navigation("DogFilters");
                });

            modelBuilder.Entity("Entities.DogPicturesRelationships", b =>
                {
                    b.Navigation("DogPictures");
                });

            modelBuilder.Entity("Entities.UserDogRelationships", b =>
                {
                    b.Navigation("UserDogs");
                });

            modelBuilder.Entity("Entities.UserHobbiesRelationShips", b =>
                {
                    b.Navigation("UserHobbies");
                });
#pragma warning restore 612, 618
        }
    }
}
